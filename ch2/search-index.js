var searchIndex = new Map(JSON.parse('[\
["os",{"doc":"The main module and entrypoint","t":"JFNCNNCCNCNCENHCCHQQCCNNNSFSFEJSFSFTTJSFTTONONNNNNONNNNNNNNNNNNNNNNNOOONNNNNNNNNNEEENNNNNNNNNNNNNHNNNNNNNNNNNNNNONHNNHNNNNNNNNNNNNNNNNNNNNNNSSSSFNNNNHNNNNFKIFFOMNNNNNNNOOMNNNOONHHHHNNNNHNNNMNNOOONNNNNNNNNJHHHFNNNNNHNNHNNNNECFNNNNONNNNNSSCCHSHH","n":["HEAP_ALLOCATOR","PageAllocImpl","alloc","batch","borrow","borrow_mut","config","console","dealloc","frame_allocater","from","heap_allocator","init_heap","into","kernel_interrupt","lang_items","logging","main","print","println","sync","syscall","try_from","try_into","type_id","APP_BASE_ADDRESS","APP_MANAGER","APP_SIZE_LIMIT","AppManager","FrameTracker","KERNEL_STACK","KERNEL_STACK_SIZE","KernelStack","MAX_APP_NUM","MapPermission","R","U","USER_STACK","USER_STACK_SIZE","UserStack","W","X","__private_field","all","app_start","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","current_app","data","data","deref","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","frame_alloc","frame_alloc_persist","frame_dealloc","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_current_app","get_sp","get_sp","hash","init","insert","intersection","intersects","into","into","into","into","into","into","is_all","is_empty","load_app","move_to_next_app","not","num_app","partial_cmp","print_app_info","print_app_info","remove","run_next_app","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","KERNEL_HEAP_SIZE","KERNEL_STACK_SIZE","PAGE_SIZE","USER_STACK_SIZE","Stdout","borrow","borrow_mut","from","into","print","try_from","try_into","type_id","write_str","FRAME_ALLOCATOR","FrameAllocator","FrameAllocatorImpl","FrameTracker","StackFrameAllocator","__private_field","alloc","alloc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","current","current","dealloc","dealloc","deref","drop","end","end","fmt","frame_alloc","frame_alloc_persist","frame_allocator_test","frame_dealloc","from","from","from","init","init_frame_allocator","into","into","into","new","new","new","ppn","recycled","recycled","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HEAP_SPACE","handle_alloc_error","init_heap","panic","Logger","borrow","borrow_mut","enabled","flush","from","init","into","log","puts","try_from","try_into","type_id","write_str","UPSafeCell","up","UPSafeCell","borrow","borrow_mut","exclusive_access","from","inner","into","new","try_from","try_into","type_id","SYSCALL_EXIT","SYSCALL_WRITE","fs","process","syscall","FD_STDOUT","sys_write","sys_exit"],"q":[[0,"os"],[25,"os::batch"],[140,"os::config"],[144,"os::console"],[154,"os::frame_allocater"],[204,"os::heap_allocator"],[207,"os::lang_items"],[208,"os::logging"],[222,"os::sync"],[224,"os::sync::up"],[235,"os::syscall"],[240,"os::syscall::fs"],[242,"os::syscall::process"],[243,"polyhal::addr"],[244,"polyhal::currrent_arch::context"],[245,"polyhal"],[246,"core::result"],[247,"core::any"],[248,"core::cmp"],[249,"core::iter::traits::collect"],[250,"core::fmt"],[251,"core::fmt"],[252,"core::hash"],[253,"polyhal::pagetable"],[254,"core::fmt"],[255,"core::panic::panic_info"],[256,"log"],[257,"log"]],"d":["","","","batch subsystem","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","kernel interrupt","","","the rust entry-point of os","打印给定表达式的值到标准输出。","打印给定表达式的值到标准输出并换行。","Synchronization and interior mutability primitives","Implementation of syscalls","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","init batch subsystem","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Returns the complement of this set of flags.","","","print apps info","","Removes the specified flags in-place.","run next app","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Uniprocessor interior mutability primitives","Wrap a static data structure inside it so that we are able …","","","Exclusive access inner data in UPSafeCell. Panic if the …","Returns the argument unchanged.","inner data","Calls <code>U::from(self)</code>.","User is responsible to guarantee that inner struct is only …","","","","","","File and filesystem-related syscalls","App management syscalls","handle syscall exception with <code>syscall_id</code> and other …","","write buf of length <code>len</code>  to a file with <code>fd</code>","task exits and submit an exit code"],"i":[0,0,1,0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,9,9,13,9,14,9,9,9,9,9,9,9,9,21,22,14,9,13,21,22,14,9,13,9,9,9,9,9,14,21,22,13,9,9,9,9,9,9,9,9,9,0,0,0,21,22,14,9,13,9,9,9,9,14,21,22,9,0,9,9,9,21,22,14,9,9,13,9,9,14,14,9,14,9,0,14,9,0,9,9,9,9,9,9,21,22,14,9,13,21,22,14,9,13,21,22,14,9,13,9,0,0,0,0,0,27,27,27,27,0,27,27,27,27,0,0,0,0,0,31,29,30,32,30,31,32,30,31,30,43,29,30,31,32,30,43,32,0,0,0,0,32,30,31,30,0,32,30,31,29,32,30,32,30,43,32,30,31,32,30,31,32,30,31,0,0,0,0,0,35,35,35,35,35,0,35,35,0,35,35,35,35,0,0,0,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0],"f":"``{bd}`{ce{}{}}0``{{bd}f}`{cc{}}``2{{hj}f}``{lf}````{c{{n{e}}}{}{}}0{cA`{}}``````````````````{{}Ab}`{{AbAb}Ab}{{AbAb}f}10{AbAd}`21::::::::::{AbAb}{{ce}f{}{}}{{AbAb}Af}2{{AbAb}Ah}```{Aj{{An{Al}}}}781{{Abc}f{{Bb{}{{B`{Ab}}}}}}{{AbBd}Bf}0000```?????{Ad{{Bh{Ab}}}}{AdAb}0{cAb{{Bb{}{{B`{Ab}}}}}}{All}{Bjl}{Bll}{{Abc}fBn}{{}f}{{AbAb}f}{{AbAb}Ab}={ce{}{}}000{AbC`}1{AbAh}0{{All}f}{Alf}{AbAb}`{{AbAb}{{Bh{Af}}}}928{{}Cb}{{AbAbAh}f}9:98:{c{{n{e}}}{}{}}000000000{cA`{}}0000;`````::{cc{}};{Cdf}332{{CfCh}Bf}``````{Cj{{Bh{d}}}}{Cl{{Bh{d}}}}??????``{{Cjd}f}{{Cld}f}{Cn{{An{Cl}}}}{D`f}``{{D`Bd}Bf}{{}{{Bh{D`}}}}{{}{{Bh{d}}}}{{}f}{df}==={{Cldd}f}{{ll}f}{ce{}{}}00{{}Cj}{dD`}{{}Cl}```{c{{n{e}}}{}{}}00000{cA`{}}00`{DbCb}:{DdCb}`77{{DfDh}Ah}{Dff}{cc{}}{{{Bh{Ch}}}f};{{DfDj}f}{{{Dl{Ad}}}f}998{{DfCh}Bf}```>>{{{An{c}}}{{Dn{c}}}{}}5`?{c{{An{c}}}{}}<<;````{{l{E`{l}}}Eb}`{{lAdl}Eb}{EdCb}","c":[],"p":[[5,"PageAllocImpl",0],[5,"PhysPage",243],[1,"unit"],[5,"TrapFrame",244],[6,"TrapType",245],[1,"usize"],[6,"Result",246],[5,"TypeId",247],[5,"MapPermission",25],[1,"u8"],[6,"Ordering",248],[1,"bool"],[5,"APP_MANAGER",25],[5,"AppManager",25],[5,"UPSafeCell",224],[17,"Item"],[10,"IntoIterator",249],[5,"Formatter",250],[8,"Result",250],[6,"Option",251],[5,"KernelStack",25],[5,"UserStack",25],[10,"Hasher",252],[5,"MappingFlags",253],[1,"never"],[5,"Arguments",250],[5,"Stdout",144],[1,"str"],[10,"FrameAllocator",154],[5,"StackFrameAllocator",154],[5,"FRAME_ALLOCATOR",154],[5,"FrameTracker",154],[5,"Layout",254],[5,"PanicInfo",255],[5,"Logger",208],[5,"Metadata",256],[5,"Record",256],[1,"slice"],[5,"RefMut",257],[1,"array"],[1,"isize"],[1,"i32"],[8,"FrameAllocatorImpl",154]],"b":[[76,"impl-Octal-for-MapPermission"],[77,"impl-LowerHex-for-MapPermission"],[78,"impl-UpperHex-for-MapPermission"],[79,"impl-Debug-for-MapPermission"],[80,"impl-Binary-for-MapPermission"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
